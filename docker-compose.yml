version: "3.9"

services:
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672" 
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 30s
      retries: 3
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    networks:
      - apiNetwork
    
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - apiNetwork

  worker_task_process_files:
    depends_on:
      - redis
      - rabbitmq
    restart: unless-stopped
    build:
      context: .
    environment:
      CELERY_BROKER_URL: ${CELERY_BROKER_URL} 
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
      URL_BASE: ${URL_BASE}
    command: celery -A tasks worker --loglevel=info
    networks:
      - apiNetwork

  front:
    build:
      context: .
    command: streamlit run main.py --server.port 8501
    volumes:
      - ./:/usr/src/app
    environment:
      CELERY_BROKER_URL: ${CELERY_BROKER_URL} 
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
      URL_BASE: ${URL_BASE}
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    ports:
      - "8501:8501"
    networks:
      - apiNetwork

  api:
    build:
      context: .
    command: fastapi run api/main.py --host 0.0.0.0 --port 8000 --reload
    environment:
      CELERY_BROKER_URL:  ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    ports:
      - "8000:8000"
    networks:
      - apiNetwork

networks:
  apiNetwork:
    driver: bridge
